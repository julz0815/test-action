{
  "_links": {
    "root": {
      "href": "/"
    },
    "self": {
      "href": "/scans/80ecac7e-dc19-4ea0-9122-dd10d247f89c/findings"
    },
    "help": {
      "href": "https://docs.veracode.com/"
    }
  },
  "scan_id": "80ecac7e-dc19-4ea0-9122-dd10d247f89c",
  "scan_status": "SUCCESS",
  "message": "Scan successful. Results size: 431723 bytes",
  "modules": [
    "verademo.war",
    "JS files within verademo.war"
  ],
  "modules_count": 2,
  "findings": [
    {
      "title": "java.lang.Runtime.exec",
      "issue_id": 1197,
      "image_path": "file:/tmp/tmp20yxk2jr/binary/verademo.veracodegen.vc.war#zip:com/veracode/verademo/controller/ToolsController",
      "gob": "B",
      "severity": 5,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an OS Command (\u0027OS Command Injection\u0027)",
      "cwe_id": "78",
      "exploit_level": "0",
      "display_text": "\u003cspan\u003eThis call to java.lang.Runtime.exec() contains a command injection flaw.  The argument to the function is constructed using untrusted input.  If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to exec() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.  Most APIs that execute system commands also have a \"safe\" version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/78.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Command_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "com/veracode/verademo/controller/ToolsController.java",
          "upload_file": "com/veracode/verademo/controller/ToolsController.java",
          "line": 56,
          "function_name": "ping",
          "qualified_function_name": "com.veracode.verademo.controller.ToolsController.ping",
          "function_prototype": "java.lang.String ping(java.lang.String)",
          "scope": "com.veracode.verademo.controller.ToolsController"
        }
      },
      "flaw_match": {
        "procedure_hash": "3149804519",
        "prototype_hash": "2923252499",
        "flaw_hash": "3051621651",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "221330682",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1487712924",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/78.html"
    },
    {
      "title": "java.lang.Runtime.exec",
      "issue_id": 1198,
      "image_path": "file:/tmp/tmp20yxk2jr/binary/verademo.veracodegen.vc.war#zip:com/veracode/verademo/controller/ToolsController",
      "gob": "B",
      "severity": 5,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an OS Command (\u0027OS Command Injection\u0027)",
      "cwe_id": "78",
      "exploit_level": "0",
      "display_text": "\u003cspan\u003eThis call to java.lang.Runtime.exec() contains a command injection flaw.  The argument to the function is constructed using untrusted input.  If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to exec() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.  Most APIs that execute system commands also have a \"safe\" version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/78.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Command_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "com/veracode/verademo/controller/ToolsController.java",
          "upload_file": "com/veracode/verademo/controller/ToolsController.java",
          "line": 59,
          "function_name": "ping",
          "qualified_function_name": "com.veracode.verademo.controller.ToolsController.ping",
          "function_prototype": "java.lang.String ping(java.lang.String)",
          "scope": "com.veracode.verademo.controller.ToolsController"
        }
      },
      "flaw_match": {
        "procedure_hash": "3149804519",
        "prototype_hash": "2923252499",
        "flaw_hash": "1314945025",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "3320331067",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1835631409",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/78.html"
    },
    {
      "title": "java.lang.Runtime.exec",
      "issue_id": 1195,
      "image_path": "file:/tmp/tmp20yxk2jr/binary/verademo.veracodegen.vc.war#zip:com/veracode/verademo/controller/ToolsController",
      "gob": "B",
      "severity": 5,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an OS Command (\u0027OS Command Injection\u0027)",
      "cwe_id": "78",
      "exploit_level": "0",
      "display_text": "\u003cspan\u003eThis call to java.lang.Runtime.exec() contains a command injection flaw.  The argument to the function is constructed using untrusted input.  If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to exec() contains tainted data from the variables (new String\\[...\\]). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.  Most APIs that execute system commands also have a \"safe\" version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/78.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Command_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "com/veracode/verademo/controller/ToolsController.java",
          "upload_file": "com/veracode/verademo/controller/ToolsController.java",
          "line": 91,
          "function_name": "fortune",
          "qualified_function_name": "com.veracode.verademo.controller.ToolsController.fortune",
          "function_prototype": "java.lang.String fortune(java.lang.String)",
          "scope": "com.veracode.verademo.controller.ToolsController"
        }
      },
      "flaw_match": {
        "procedure_hash": "2161030689",
        "prototype_hash": "3827778930",
        "flaw_hash": "3753823106",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "4165693487",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3322588175",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/78.html"
    },
    {
      "title": "java.lang.Runtime.exec",
      "issue_id": 1196,
      "image_path": "file:/tmp/tmp20yxk2jr/binary/verademo.veracodegen.vc.war#zip:com/veracode/verademo/controller/ToolsController",
      "gob": "B",
      "severity": 5,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an OS Command (\u0027OS Command Injection\u0027)",
      "cwe_id": "78",
      "exploit_level": "0",
      "display_text": "\u003cspan\u003eThis call to java.lang.Runtime.exec() contains a command injection flaw.  The argument to the function is constructed using untrusted input.  If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to exec() contains tainted data from the variable cmd. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.  Most APIs that execute system commands also have a \"safe\" version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/78.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Command_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "com/veracode/verademo/controller/ToolsController.java",
          "upload_file": "com/veracode/verademo/controller/ToolsController.java",
          "line": 94,
          "function_name": "fortune",
          "qualified_function_name": "com.veracode.verademo.controller.ToolsController.fortune",
          "function_prototype": "java.lang.String fortune(java.lang.String)",
          "scope": "com.veracode.verademo.controller.ToolsController"
        }
      },
      "flaw_match": {
        "procedure_hash": "2161030689",
        "prototype_hash": "3827778930",
        "flaw_hash": "3707028537",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2620704574",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/78.html"
    },
    {
      "title": "java.sql.Statement.executeQuery",
      "issue_id": 1013,
      "image_path": "file:/tmp/tmp20yxk2jr/binary/verademo.veracodegen.vc.war#zip:com/veracode/verademo/controller/UserController",
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "exploit_level": "0",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "com/veracode/verademo/controller/UserController.java",
          "upload_file": "com/veracode/verademo/controller/UserController.java",
          "line": 166,
          "function_name": "processLogin",
          "qualified_function_name": "com.veracode.verademo.controller.UserController.processLogin",
          "function_prototype": "java.lang.String processLogin(@org.springframework.web.bind.annotation.RequestParam(value\u003d\u0027user\u0027, required\u003d1) java.lang.String,@org.springframework.web.bind.annotation.RequestParam(value\u003d\u0027password\u0027, required\u003d1) java.lang.String,@org.springframework.web.bind.annotation.RequestParam(value\u003d\u0027remember\u0027, required\u003d0) java.lang.String,@org.springframework.web.bind.annotation.RequestParam(value\u003d\u0027target\u0027, required\u003d0) java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
          "scope": "com.veracode.verademo.controller.UserController"
        }
      },
      "flaw_match": {
        "procedure_hash": "1665904725",
        "prototype_hash": "839857025",
        "flaw_hash": "3392777041",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1176028798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/89.html"
    },
    {
      "title": "java.sql.Statement.executeQuery",
      "issue_id": 1015,
      "image_path": "file:/tmp/tmp20yxk2jr/binary/verademo.veracodegen.vc.war#zip:com/veracode/verademo/controller/UserController",
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "exploit_level": "0",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable sql. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "com/veracode/verademo/controller/UserController.java",
          "upload_file": "com/veracode/verademo/controller/UserController.java",
          "line": 251,
          "function_name": "showPasswordHint",
          "qualified_function_name": "com.veracode.verademo.controller.UserController.showPasswordHint",
          "function_prototype": "java.lang.String showPasswordHint(java.lang.String)",
          "scope": "com.veracode.verademo.controller.UserController"
        }
      },
      "flaw_match": {
        "procedure_hash": "14368270",
        "prototype_hash": "649289062",
        "flaw_hash": "3392777041",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1176028798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/89.html"
    },
    {
      "title": "java.sql.Statement.executeQuery",
      "issue_id": 1014,
      "image_path": "file:/tmp/tmp20yxk2jr/binary/verademo.veracodegen.vc.war#zip:com/veracode/verademo/controller/UserController",
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "exploit_level": "0",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable sql. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "com/veracode/verademo/controller/UserController.java",
          "upload_file": "com/veracode/verademo/controller/UserController.java",
          "line": 316,
          "function_name": "processRegister",
          "qualified_function_name": "com.veracode.verademo.controller.UserController.processRegister",
          "function_prototype": "java.lang.String processRegister(@org.springframework.web.bind.annotation.RequestParam(value\u003d\u0027user\u0027) java.lang.String, javax.servlet.http.HttpServletRequest, org.springframework.ui.Model)",
          "scope": "com.veracode.verademo.controller.UserController"
        }
      },
      "flaw_match": {
        "procedure_hash": "3365427062",
        "prototype_hash": "2646652268",
        "flaw_hash": "3392777041",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1176028798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/89.html"
    },
    {
      "title": "java.sql.Statement.execute",
      "issue_id": 1008,
      "image_path": "file:/tmp/tmp20yxk2jr/binary/verademo.veracodegen.vc.war#zip:com/veracode/verademo/controller/UserController",
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "exploit_level": "0",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to java.sql.Statement.execute() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute() contains tainted data from the variable query. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "com/veracode/verademo/controller/UserController.java",
          "upload_file": "com/veracode/verademo/controller/UserController.java",
          "line": 384,
          "function_name": "processRegisterFinish",
          "qualified_function_name": "com.veracode.verademo.controller.UserController.processRegisterFinish",
          "function_prototype": "java.lang.String processRegisterFinish(@org.springframework.web.bind.annotation.RequestParam(value\u003d\u0027password\u0027, required\u003d1) java.lang.String,@org.springframework.web.bind.annotation.RequestParam(value\u003d\u0027cpassword\u0027, required\u003d1) java.lang.String,@org.springframework.web.bind.annotation.RequestParam(value\u003d\u0027realName\u0027, required\u003d1) java.lang.String,@org.springframework.web.bind.annotation.RequestParam(value\u003d\u0027blabName\u0027, required\u003d1) java.lang.String, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, org.springframework.ui.Model)",
          "scope": "com.veracode.verademo.controller.UserController"
        }
      },
      "flaw_match": {
        "procedure_hash": "1551041351",
        "prototype_hash": "992078440",
        "flaw_hash": "3765405848",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 1,
        "cause_hash": "153293750",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "2866949028",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/89.html"
    },
    {
      "title": "java.sql.Statement.executeQuery",
      "issue_id": 1016,
      "image_path": "file:/tmp/tmp20yxk2jr/binary/verademo.veracodegen.vc.war#zip:com/veracode/verademo/controller/UserController",
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "exploit_level": "0",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable sqlMyEvents. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "com/veracode/verademo/controller/UserController.java",
          "upload_file": "com/veracode/verademo/controller/UserController.java",
          "line": 496,
          "function_name": "showProfile",
          "qualified_function_name": "com.veracode.verademo.controller.UserController.showProfile",
          "function_prototype": "java.lang.String showProfile(@org.springframework.web.bind.annotation.RequestParam(value\u003d\u0027type\u0027, required\u003d0) java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest)",
          "scope": "com.veracode.verademo.controller.UserController"
        }
      },
      "flaw_match": {
        "procedure_hash": "1695726047",
        "prototype_hash": "931230983",
        "flaw_hash": "3392777041",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 2,
        "cause_hash": "1176028798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/89.html"
    },
    {
      "title": "java.sql.PreparedStatement.executeQuery",
      "issue_id": 1025,
      "image_path": "file:/tmp/tmp20yxk2jr/binary/verademo.veracodegen.vc.war#zip:com/veracode/verademo/controller/UserController",
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "exploit_level": "0",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to java.sql.PreparedStatement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. executeQuery() was called on the myInfo object, which contains tainted data. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "com/veracode/verademo/controller/UserController.java",
          "upload_file": "com/veracode/verademo/controller/UserController.java",
          "line": 507,
          "function_name": "showProfile",
          "qualified_function_name": "com.veracode.verademo.controller.UserController.showProfile",
          "function_prototype": "java.lang.String showProfile(@org.springframework.web.bind.annotation.RequestParam(value\u003d\u0027type\u0027, required\u003d0) java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest)",
          "scope": "com.veracode.verademo.controller.UserController"
        }
      },
      "flaw_match": {
        "procedure_hash": "1695726047",
        "prototype_hash": "931230983",
        "flaw_hash": "1480817290",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "2866949028",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "4"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/89.html"
    },
    {
      "title": "java.sql.PreparedStatement.executeQuery",
      "issue_id": 1024,
      "image_path": "file:/tmp/tmp20yxk2jr/binary/verademo.veracodegen.vc.war#zip:com/veracode/verademo/controller/BlabController",
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "exploit_level": "0",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to java.sql.PreparedStatement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. executeQuery() was called on the blabberQuery object, which contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "com/veracode/verademo/controller/BlabController.java",
          "upload_file": "com/veracode/verademo/controller/BlabController.java",
          "line": 494,
          "function_name": "showBlabbers",
          "qualified_function_name": "com.veracode.verademo.controller.BlabController.showBlabbers",
          "function_prototype": "java.lang.String showBlabbers(@org.springframework.web.bind.annotation.RequestParam(value\u003d\u0027sort\u0027, required\u003d0) java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest)",
          "scope": "com.veracode.verademo.controller.BlabController"
        }
      },
      "flaw_match": {
        "procedure_hash": "1426715244",
        "prototype_hash": "364381741",
        "flaw_hash": "1480817290",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2866949028",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "4"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/89.html"
    },
    {
      "title": "java.sql.Statement.executeQuery",
      "issue_id": 1012,
      "image_path": "file:/tmp/tmp20yxk2jr/binary/verademo.veracodegen.vc.war#zip:com/veracode/verademo/commands/RemoveAccountCommand",
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "exploit_level": "0",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "com/veracode/verademo/commands/RemoveAccountCommand.java",
          "upload_file": "com/veracode/verademo/commands/RemoveAccountCommand.java",
          "line": 40,
          "function_name": "execute",
          "qualified_function_name": "com.veracode.verademo.commands.RemoveAccountCommand.execute",
          "function_prototype": "void execute(java.lang.String)",
          "scope": "com.veracode.verademo.commands.RemoveAccountCommand"
        }
      },
      "flaw_match": {
        "procedure_hash": "2052213374",
        "prototype_hash": "27480697",
        "flaw_hash": "3392777041",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1176028798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/89.html"
    },
    {
      "title": "java.sql.Statement.execute",
      "issue_id": 1007,
      "image_path": "file:/tmp/tmp20yxk2jr/binary/verademo.veracodegen.vc.war#zip:com/veracode/verademo/commands/RemoveAccountCommand",
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "exploit_level": "0",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to java.sql.Statement.execute() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute() contains tainted data from the variable sqlQuery. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "com/veracode/verademo/commands/RemoveAccountCommand.java",
          "upload_file": "com/veracode/verademo/commands/RemoveAccountCommand.java",
          "line": 47,
          "function_name": "execute",
          "qualified_function_name": "com.veracode.verademo.commands.RemoveAccountCommand.execute",
          "function_prototype": "void execute(java.lang.String)",
          "scope": "com.veracode.verademo.commands.RemoveAccountCommand"
        }
      },
      "flaw_match": {
        "procedure_hash": "2052213374",
        "prototype_hash": "27480697",
        "flaw_hash": "239218340",
        "flaw_hash_count": 6,
        "flaw_hash_ordinal": 4,
        "cause_hash": "1176028798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "3"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/89.html"
    },
    {
      "title": "java.sql.Statement.execute",
      "issue_id": 1009,
      "image_path": "file:/tmp/tmp20yxk2jr/binary/verademo.veracodegen.vc.war#zip:com/veracode/verademo/commands/RemoveAccountCommand",
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "exploit_level": "0",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to java.sql.Statement.execute() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "com/veracode/verademo/commands/RemoveAccountCommand.java",
          "upload_file": "com/veracode/verademo/commands/RemoveAccountCommand.java",
          "line": 51,
          "function_name": "execute",
          "qualified_function_name": "com.veracode.verademo.commands.RemoveAccountCommand.execute",
          "function_prototype": "void execute(java.lang.String)",
          "scope": "com.veracode.verademo.commands.RemoveAccountCommand"
        }
      },
      "flaw_match": {
        "procedure_hash": "2052213374",
        "prototype_hash": "27480697",
        "flaw_hash": "239218340",
        "flaw_hash_count": 6,
        "flaw_hash_ordinal": 6,
        "cause_hash": "1176028798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "3"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/89.html"
    },
    {
      "title": "java.sql.Statement.executeQuery",
      "issue_id": 1011,
      "image_path": "file:/tmp/tmp20yxk2jr/binary/verademo.veracodegen.vc.war#zip:com/veracode/verademo/commands/ListenCommand",
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "exploit_level": "0",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "com/veracode/verademo/commands/ListenCommand.java",
          "upload_file": "com/veracode/verademo/commands/ListenCommand.java",
          "line": 40,
          "function_name": "execute",
          "qualified_function_name": "com.veracode.verademo.commands.ListenCommand.execute",
          "function_prototype": "void execute(java.lang.String)",
          "scope": "com.veracode.verademo.commands.ListenCommand"
        }
      },
      "flaw_match": {
        "procedure_hash": "1600354578",
        "prototype_hash": "2344031398",
        "flaw_hash": "3392777041",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1176028798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/89.html"
    },
    {
      "title": "java.sql.Statement.execute",
      "issue_id": 1006,
      "image_path": "file:/tmp/tmp20yxk2jr/binary/verademo.veracodegen.vc.war#zip:com/veracode/verademo/commands/ListenCommand",
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "exploit_level": "0",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to java.sql.Statement.execute() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute() contains tainted data from the variable sqlQuery. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "com/veracode/verademo/commands/ListenCommand.java",
          "upload_file": "com/veracode/verademo/commands/ListenCommand.java",
          "line": 47,
          "function_name": "execute",
          "qualified_function_name": "com.veracode.verademo.commands.ListenCommand.execute",
          "function_prototype": "void execute(java.lang.String)",
          "scope": "com.veracode.verademo.commands.ListenCommand"
        }
      },
      "flaw_match": {
        "procedure_hash": "1600354578",
        "prototype_hash": "2344031398",
        "flaw_hash": "239218340",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 4,
        "cause_hash": "1176028798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "3"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/89.html"
    },
    {
      "title": "java.sql.Statement.executeQuery",
      "issue_id": 1010,
      "image_path": "file:/tmp/tmp20yxk2jr/binary/verademo.veracodegen.vc.war#zip:com/veracode/verademo/commands/IgnoreCommand",
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "exploit_level": "0",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "com/veracode/verademo/commands/IgnoreCommand.java",
          "upload_file": "com/veracode/verademo/commands/IgnoreCommand.java",
          "line": 40,
          "function_name": "execute",
          "qualified_function_name": "com.veracode.verademo.commands.IgnoreCommand.execute",
          "function_prototype": "void execute(java.lang.String)",
          "scope": "com.veracode.verademo.commands.IgnoreCommand"
        }
      },
      "flaw_match": {
        "procedure_hash": "592522510",
        "prototype_hash": "154563142",
        "flaw_hash": "3392777041",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "1176028798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/89.html"
    },
    {
      "title": "java.sql.Statement.execute",
      "issue_id": 1005,
      "image_path": "file:/tmp/tmp20yxk2jr/binary/verademo.veracodegen.vc.war#zip:com/veracode/verademo/commands/IgnoreCommand",
      "gob": "B",
      "severity": 4,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "cwe_id": "89",
      "exploit_level": "0",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to java.sql.Statement.execute() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute() contains tainted data from the variable sqlQuery. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "com/veracode/verademo/commands/IgnoreCommand.java",
          "upload_file": "com/veracode/verademo/commands/IgnoreCommand.java",
          "line": 47,
          "function_name": "execute",
          "qualified_function_name": "com.veracode.verademo.commands.IgnoreCommand.execute",
          "function_prototype": "void execute(java.lang.String)",
          "scope": "com.veracode.verademo.commands.IgnoreCommand"
        }
      },
      "flaw_match": {
        "procedure_hash": "592522510",
        "prototype_hash": "154563142",
        "flaw_hash": "239218340",
        "flaw_hash_count": 4,
        "flaw_hash_ordinal": 4,
        "cause_hash": "1176028798",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "3"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/89.html"
    }
  ],
  "selected_modules": [],
  "engine_version": "20250924195751",
  "pipeline_scan": "25.2.0-0",
  "dev_stage": "DEVELOPMENT"
}