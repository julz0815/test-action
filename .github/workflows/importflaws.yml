on:
  workflow_dispatch:
#  pull_request:
#    branches:
#      - main
#      - feature-123

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: 8
#    - name: Cache Maven packages
#      uses: actions/cache@v3
#      with:
#        path: ~/.m2
#        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
    - name: Build with Maven
      run: mvn clean package

    - uses: actions/upload-artifact@v4
      with:
        name: verademo.war
        path: target/verademo.war
        
#  pipeline_scan:
#      needs: build
#      runs-on: ubuntu-latest
#      name: pipeline scan
#      steps:
#        - name: checkout repo
#          uses: actions/checkout@v3

#        - name: get archive
#          uses: actions/download-artifact@v4
#          with:
#            name: verademo.war
#        - name: pipeline-scan action step
#          id: pipelien-scan
#          uses: veracode/Veracode-pipeline-scan-action@esd-true
#          with:
#            vid: ${{ secrets.VID }}
#            vkey: ${{ secrets.VKEY }}
#            file: "verademo.war" 
#            request_policy: "VeraDemo Policy"
#            debug: 1
#            fail_build: true



  get-policy-flaws:
    runs-on: ubuntu-latest
    continue-on-error: true
    container: 
      image: veracode/api-signing:latest
    steps:
      - name: get policy flaws
        run: |
          cd /tmp
          export VERACODE_API_KEY_ID=${{ secrets.VID }}
          export VERACODE_API_KEY_SECRET=${{ secrets.VKEY }}
          #guid=$(http --auth-type veracode_hmac GET "https://api.veracode.com/appsec/v1/applications?name=test-action" | jq -r '._embedded.applications[0].guid') 
          guid=5c6cda05-fa3c-47a5-8715-a1babc21f8f4
          echo GUID: ${guid}
          total_flaws=$(http --auth-type veracode_hmac GET "https://api.veracode.com/appsec/v2/applications/${guid}/findings?scan_type=STATIC&violates_policy=True&include_annot=TRUE" | jq -r '.page.total_elements')
          echo TOTAL_FLAWS: ${total_flaws}
          http --auth-type veracode_hmac GET "https://api.veracode.com/appsec/v2/applications/${guid}/findings?scan_type=STATIC&violates_policy=True&size=${total_flaws}&include_annot=TRUE" > policy_flaws.json

      - name: save results file
        uses: actions/upload-artifact@v4
        with:
          name: policy-flaws
          path: /tmp/policy_flaws.json
      

#  results_to_security_tab:
#    needs: get-policy-flaws
#    runs-on: ubuntu-latest
#    #if: ${{ failure() && inputs.enable_security_report }}
#    if: always()
#    name: Send policy scan report to Security tab
#    steps:
#      - name: Get scan results
#        uses: actions/download-artifact@v3
#        with:
#          name: policy-flaws
#          path: /tmp
#      - name: Convert policy scan output to SARIF format
#        id: convert
#        uses: Veracode/veracode-pipeline-scan-results-to-sarif@granular_severities
#        with:
#          scan-type: policy
#          results-json: '/tmp/policy_flaws.json'
#          output-results-sarif: veracode-results.sarif
#          source_base_path_1: "com/:src/main/java/com/"
#          source_base_path_2: "WEB-INF:src/main/webapp/WEB-INF"
          
  import-policy-flaws:
    needs: get-policy-flaws
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v3
      - name: get flaw file
        uses: actions/download-artifact@v4
        with:
          name: policy-flaws
          path: /tmp

      #- name: Show folder
      #  run: |
      #    ls -laR /tmp

      - name: import flaws as issues
        uses: veracode/veracode-flaws-to-issues@ADO_workitems
        with:
          dts_type: ADO
          ADO_PAT: ${{ secrets.ADO_PAT }}
          ADO_ORG: jtotzek
          ADO_PROJECT: bulk-update
          scan-results-json: '/tmp/policy_flaws.json'
          autoCloseFindings: true
          debug: true
